Given a 2D integer array board representing the grid of candy, different positive integers board[i][j] represent different types of candies. A value of board[i][j] = 0 
represents that the cell at position (i, j) is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a 
stable state by crushing candies according to the following rules:
If three or more candies of the same type are adjacent vertically or horizontally, "crush" them all at the same time - these positions become empty.
After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or 
bottom at the same time. (No new candies will drop outside the top boundary.)
After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.
If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.

You need to perform the above rules until the board becomes stable, then return the current board.

Note:

The length of board will be in the range [3, 50].
The length of board[i] will be in the range [3, 50].
Each board[i][j] will initially start as an integer in the range [1, 2000].

Input Description:
First line contains, N the size of board.(1<N<50)
Rest line contains N lines of integrs, each line contains 5 integers.

Output Desription:
Print the board after restoring the board to a stable state by crushing candies.

Sample Input:
10
110 5 112 113 114
210 211 5 213 214
310 311 3 313 314
410 411 412 5 414
5 1 512 3 3
610 4 1 613 614
710 1 2 713 714
810 1 2 1 1
1 1 2 2 2
4 1 4 4 1014

Sample Output:
[0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [110, 0, 0, 0, 114] [210, 0, 0, 0, 214] [310, 0, 0, 113, 314] [410, 0, 0, 213, 414] [610, 211, 112, 313, 614] [710, 311, 412, 613, 714] [810, 411, 512, 713, 1014]

Explanation:
By cushing the candies from the rows from bottom to up, we can achiev the output. Look question for better explanation.

Sample Input:
5
22 33 55 66 8
33 2 3 4 5
2 2 2 3 4
1 3 3 4 5
6 3 3 3 3

Sample Output:
[0, 0, 0, 0, 0] [22, 0, 0, 66, 8] [33, 33, 55, 4, 5] [1, 2, 3, 3, 4] [6, 3, 3, 4, 5]

Sample Input:
6
9 2 5 7 1
8 9 7 1 2
7 8 1 1 2
2 7 1 2 3
8 1 2 3 6
1 2 3 4 5

Sample Output:
[9, 2, 5, 7, 1] [8, 9, 7, 1, 2] [7, 8, 1, 1, 2] [2, 7, 1, 2, 3] [8, 1, 2, 3, 6] [1, 2, 3, 4, 5]

Sample Input:
4
9 7 5 3 1
7 5 1 2 3
5 1 6 3 2
1 6 6 6 3

Sample Output:
[9, 0, 0, 0, 1] [7, 7, 5, 3, 3] [5, 5, 1, 2, 2] [1, 1, 6, 3, 3]

Sample Input:
3
101 233 455 63 22
233 455 455 455 2
1 1 233 3 2

Sample Output:
[101, 0, 0, 0, 22] [233, 233, 455, 63, 2] [1, 1, 233, 3, 2]

Sample Input:
3
200 210 21 22 23
210 210 21 21 23
0 0 0 0 0

Sample Output:
[0, 0, 0, 0, 0] [200, 210, 21, 22, 23] [210, 210, 21, 21, 23]
